// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
   static Array ram;
   static Array heap;
   static Array freeList;
   static Array tail;

    /** Initializes the class. */
    function void init() {
      let ram = 0;
      let heap = 2048;
      let freeList = 2048;
      let tail = freeList;
      let freeList[0] = null;
      let freeList[1] = 14335;
      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
       return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
       let ram[address] = value;
       return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var Array addr, block;
      var int segmentSize;
      let addr = freeList;
      while (true){
         if(addr = null){
            return null;
         }else{
            let segmentSize = addr[1];
            if(~(segmentSize < (size + 2))){
               let addr[1] = segmentSize - size - 2;            
               let block = addr + segmentSize - size;
               let block[0] = null;
               let block[1] = size;
               return block;
            }
            let addr = addr[0];
         }
      }
      return null;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      let tail[0] = o;
      let tail = o;
      return;   
    }    
}
