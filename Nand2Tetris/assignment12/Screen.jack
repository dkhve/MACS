// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static int start, length;
    static boolean currColor;
    static Array twoToThe;
    /** Initializes the Screen. */
    function void init() {
      var int val, i;
      let start = 16384;
      let length = 8192;
      let currColor = true;
      let val = 1;
      let i = 0;
      let twoToThe = Array.new(16);
      while(i < 16){
         let twoToThe[i] = val;
         let val = val + val;
         let i = i + 1;
      }
      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
       var int i;
       let i = 0;
       while (i < length){
          let start[i] = false;
          let i = i + 1;
       }
       return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
       let currColor = b;
       return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
       var int addr;
       let addr = (32 * y) + (x / 16);
       if(currColor){
          let start[addr] = start[addr] | twoToThe[(x&15)]; 
       }else{
          let start[addr] = start[addr] & (~twoToThe[(x&15)]);
       }
       return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
       var int dx, dy, a, b, diff, direction, minX, minY;

       let dx = Math.abs(x1 - x2);
       let dy = Math.abs(y1 - y2);

       if (dy = 0){
          do Screen.drawHorizontalLine(y1, x1, x2);
          return;
       }
       if (dx = 0){
          do Screen.drawVerticalLine(x1, y1, y2);
          return;
       }

      let a = 0;
      let b = 0;
      let diff = 0;
      if (x1 < x2){
         let minX = x1;
         let minY = y1;
         if(y1 > y2){
            let direction = -1;
         }else{
            let direction = 1;
         }
      }else{
         let minX = x2;
         let minY = y2;
         if (y1 < y2){
            let direction = -1;
         }else{
            let direction = 1;
         }
      }

      while((~(a > dx)) & (~(b > dy))){
         do Screen.drawPixel(minX + a, minY + (direction * b));

         if (~(diff < 0)){
            let diff = diff - dx;
            let b = b + 1;
         }else{
            let diff = diff + dy;
            let a = a + 1;
         }
      }
      return;
    }

    function void drawVerticalLine(int x, int y1, int y2){
        var int temp;
        if(y1 > y2){
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        while(~(y2 < y1)){
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    function void drawHorizontalLine(int y, int x1, int x2){
       var int temp;
        if(x1 > x2){
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }
        while(~(x2 < x1)){
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
       while(~(y1 > y2)){
          do Screen.drawHorizontalLine(y1, x1, x2);
          let y1 = y1 + 1;
       }
       return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
       var int dy, x1, x2, y1, y2;
       if (r > 181){
          return;
       }

       let dy = -r;
       while(~(dy > r)){
         let x1 = x - Math.sqrt((r * r) - (dy * dy));
         let x2 = x + Math.sqrt((r * r) - (dy * dy));
         let y1 = y + dy;
         let y2 = y + dy;
         do Screen.drawHorizontalLine(y1, x1, x2);
         let dy = dy + 1;
       }
       return;
    }
}
