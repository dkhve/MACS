function UserBoard.new 0
push constant 7
call Memory.alloc 1
pop pointer 0
push argument 2
pop this 0
push argument 3
pop this 1
push argument 0
pop this 2
push argument 1
pop this 3
push pointer 0
call UserBoard.initCells 1
pop temp 0
call ShipVector.new 0
pop this 5
push constant 7
pop this 6
push constant 0
not
call Screen.setColor 1
pop temp 0
push pointer 0
call UserBoard.draw 1
pop temp 0
push pointer 0
return
function UserBoard.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function UserBoard.initCells 6
push argument 0
pop pointer 0
push constant 0
pop local 0
push this 0
call Array.new 1
pop this 4
label WHILE_EXP0
push local 0
push this 0
lt
not
if-goto WHILE_END0
push this 0
call Array.new 1
pop local 4
push local 0
push this 4
add
push local 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push this 0
lt
not
if-goto WHILE_END1
push this 2
push local 1
push this 1
call Math.multiply 2
add
pop local 2
push this 3
push local 0
push this 1
call Math.multiply 2
add
pop local 3
push local 1
push local 4
add
push local 2
push local 3
push this 1
call Cell.new 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push local 4
add
pop pointer 1
push that 0
pop local 5
push local 5
call Cell.clearState 0
call Cell.drawState 2
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function UserBoard.getCellSize 0
push argument 0
pop pointer 0
push this 1
return
function UserBoard.getCellNumber 0
push argument 0
pop pointer 0
push this 0
return
function UserBoard.getLeftOffset 0
push argument 0
pop pointer 0
push this 2
return
function UserBoard.draw 4
push argument 0
pop pointer 0
push this 0
push this 1
call Math.multiply 2
pop local 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 0
push constant 1
add
lt
not
if-goto WHILE_END0
push this 3
push local 0
push this 1
call Math.multiply 2
add
push constant 1
sub
pop local 3
push this 2
push constant 1
sub
push local 3
push this 2
push constant 1
sub
push local 1
add
push local 3
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push this 0
push constant 1
add
lt
not
if-goto WHILE_END1
push this 2
push local 0
push this 1
call Math.multiply 2
add
push constant 1
sub
pop local 2
push local 2
push this 3
push constant 1
sub
push local 2
push this 3
push constant 1
sub
push local 1
add
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push constant 0
return
function UserBoard.restoreCellState 3
push argument 0
pop pointer 0
push argument 2
push this 4
add
pop pointer 1
push that 0
pop local 1
push argument 1
push local 1
add
pop pointer 1
push that 0
pop local 0
push local 0
call Cell.getState 1
pop local 2
push local 0
push local 2
call Cell.drawState 2
pop temp 0
push constant 0
return
function UserBoard.putShip 2
push argument 0
pop pointer 0
push argument 2
push this 4
add
pop pointer 1
push that 0
pop local 1
push argument 1
push local 1
add
pop pointer 1
push that 0
pop local 0
push local 0
call Cell.shipState 0
call Cell.drawState 2
pop temp 0
push constant 0
return
function UserBoard.validate 0
push argument 0
pop pointer 0
push pointer 0
call UserBoard.saveShips 1
pop temp 0
push this 5
call ShipVector.validate 1
return
function UserBoard.saveShips 5
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 0
lt
not
if-goto WHILE_END0
push constant 0
pop local 1
push local 0
push this 4
add
pop pointer 1
push that 0
pop local 3
label WHILE_EXP1
push local 1
push this 0
lt
not
if-goto WHILE_END1
push local 1
push local 3
add
pop pointer 1
push that 0
pop local 4
push local 4
call Cell.isChecked 1
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 4
call Cell.getState 1
call Cell.shipState 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 4
call Cell.setChecked 1
pop temp 0
push pointer 0
push local 0
push local 1
call UserBoard.getShip 3
pop local 2
push this 5
push local 2
call ShipVector.append 2
pop temp 0
label IF_FALSE1
label IF_FALSE0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function UserBoard.getShip 6
push argument 0
pop pointer 0
push argument 2
push argument 1
call Ship.new 2
pop local 5
push argument 2
push constant 1
add
pop local 1
push argument 1
pop local 2
push local 2
push this 4
add
pop pointer 1
push that 0
pop local 3
push local 1
push this 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push local 3
add
pop pointer 1
push that 0
pop local 4
push local 4
call Cell.getState 1
call Cell.shipState 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 4
call Cell.setChecked 1
pop temp 0
push local 5
call Ship.incrementLength 1
pop temp 0
push local 5
call Ship.horizontal 0
call Ship.setDirection 2
pop temp 0
label WHILE_EXP0
push constant 0
not
not
if-goto WHILE_END0
push local 1
push constant 1
add
pop local 1
push local 1
push this 0
lt
not
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 5
return
label IF_FALSE2
push local 1
push local 3
add
pop pointer 1
push that 0
pop local 4
push local 4
call Cell.getState 1
call Cell.shipState 0
eq
not
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 5
return
label IF_FALSE3
push local 4
call Cell.setChecked 1
pop temp 0
push local 5
call Ship.incrementLength 1
pop temp 0
goto WHILE_EXP0
label WHILE_END0
label IF_FALSE1
label IF_FALSE0
push argument 2
pop local 1
push argument 1
push constant 1
add
pop local 2
push local 2
push this 0
lt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 2
push this 4
add
pop pointer 1
push that 0
pop local 3
push local 1
push local 3
add
pop pointer 1
push that 0
pop local 4
push local 4
call Cell.getState 1
call Cell.shipState 0
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 5
call Ship.vertical 0
call Ship.setDirection 2
pop temp 0
push local 4
call Cell.setChecked 1
pop temp 0
push local 5
call Ship.incrementLength 1
pop temp 0
label WHILE_EXP1
push constant 0
not
not
if-goto WHILE_END1
push local 2
push constant 1
add
pop local 2
push local 2
push this 0
lt
not
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 5
return
label IF_FALSE6
push local 2
push this 4
add
pop pointer 1
push that 0
pop local 3
push local 1
push local 3
add
pop pointer 1
push that 0
pop local 4
push local 4
call Cell.getState 1
call Cell.shipState 0
eq
not
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push local 5
return
label IF_FALSE7
push local 4
call Cell.setChecked 1
pop temp 0
push local 5
call Ship.incrementLength 1
pop temp 0
goto WHILE_EXP1
label WHILE_END1
label IF_FALSE5
label IF_FALSE4
push local 5
return
function UserBoard.shoot 2
push argument 0
pop pointer 0
push argument 2
push this 4
add
pop pointer 1
push that 0
pop local 0
push argument 1
push local 0
add
pop pointer 1
push that 0
pop local 1
push local 1
call Cell.getState 1
call Cell.clearState 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
call Cell.missedState 0
call Cell.drawState 2
pop temp 0
label IF_FALSE0
push local 1
call Cell.getState 1
call Cell.shipState 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 1
call Cell.hitState 0
call Cell.drawState 2
pop temp 0
push pointer 0
call UserBoard.markSunkShips 1
pop temp 0
push this 6
push constant 0
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
not
return
label IF_FALSE2
label IF_FALSE1
push constant 0
return
function UserBoard.markSunkShips 10
push argument 0
pop pointer 0
push constant 0
pop local 0
push constant 0
pop local 5
label WHILE_EXP0
push local 0
push this 5
call ShipVector.size 1
lt
not
if-goto WHILE_END0
push this 5
push local 0
call ShipVector.get 2
pop local 6
push local 6
call Ship.getStartX 1
pop local 2
push local 6
call Ship.getStartY 1
pop local 3
push local 6
call Ship.getLength 1
pop local 4
push constant 0
not
pop local 9
push local 6
call Ship.getDirection 1
call Ship.vertical 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push local 4
lt
push local 9
and
not
if-goto WHILE_END1
push local 3
push local 1
add
push this 4
add
pop pointer 1
push that 0
pop local 7
push local 2
push local 7
add
pop pointer 1
push that 0
pop local 8
push local 8
call Cell.getState 1
call Cell.hitState 0
eq
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
pop local 9
label IF_FALSE1
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 9
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
pop local 1
label WHILE_EXP2
push local 1
push local 4
lt
not
if-goto WHILE_END2
push local 3
push local 1
add
push this 4
add
pop pointer 1
push that 0
pop local 7
push local 2
push local 7
add
pop pointer 1
push that 0
pop local 8
push local 8
call Cell.sunkState 0
call Cell.drawState 2
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP2
label WHILE_END2
push this 6
push constant 1
sub
pop this 6
label IF_FALSE2
goto IF_END0
label IF_FALSE0
push constant 0
pop local 1
label WHILE_EXP3
push local 1
push local 4
lt
push local 9
and
not
if-goto WHILE_END3
push local 3
push this 4
add
pop pointer 1
push that 0
pop local 7
push local 2
push local 1
add
push local 7
add
pop pointer 1
push that 0
pop local 8
push local 8
call Cell.getState 1
call Cell.hitState 0
eq
not
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
pop local 9
label IF_FALSE3
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP3
label WHILE_END3
push local 9
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 0
pop local 1
label WHILE_EXP4
push local 1
push local 4
lt
not
if-goto WHILE_END4
push local 3
push this 4
add
pop pointer 1
push that 0
pop local 7
push local 2
push local 1
add
push local 7
add
pop pointer 1
push that 0
pop local 8
push local 8
call Cell.sunkState 0
call Cell.drawState 2
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP4
label WHILE_END4
push this 6
push constant 1
sub
pop this 6
label IF_FALSE4
label IF_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function UserBoard.reset 0
push argument 0
pop pointer 0
push this 4
call Array.dispose 1
pop temp 0
push pointer 0
call UserBoard.initCells 1
pop temp 0
push this 5
call ShipVector.dispose 1
pop temp 0
call ShipVector.new 0
pop this 5
push constant 0
return
