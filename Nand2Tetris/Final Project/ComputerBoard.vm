function ComputerBoard.new 0
push constant 7
call Memory.alloc 1
pop pointer 0
push argument 2
pop this 0
push argument 3
pop this 1
push argument 0
pop this 2
push argument 1
pop this 3
push constant 0
pop this 6
push pointer 0
call ComputerBoard.initCells 1
pop temp 0
call ShipVector.new 0
pop this 5
push constant 0
not
call Screen.setColor 1
pop temp 0
push pointer 0
call ComputerBoard.draw 1
pop temp 0
push pointer 0
return
function ComputerBoard.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function ComputerBoard.initCells 6
push argument 0
pop pointer 0
push constant 0
pop local 0
push this 0
call Array.new 1
pop this 4
label WHILE_EXP0
push local 0
push this 0
lt
not
if-goto WHILE_END0
push this 0
call Array.new 1
pop local 4
push local 0
push this 4
add
push local 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push this 0
lt
not
if-goto WHILE_END1
push this 2
push local 1
push this 1
call Math.multiply 2
add
pop local 2
push this 3
push local 0
push this 1
call Math.multiply 2
add
pop local 3
push local 1
push local 4
add
push local 2
push local 3
push this 1
call Cell.new 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push local 4
add
pop pointer 1
push that 0
pop local 5
push local 5
call Cell.clearState 0
call Cell.drawState 2
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function ComputerBoard.getCellSize 0
push argument 0
pop pointer 0
push this 1
return
function ComputerBoard.getCellNumber 0
push argument 0
pop pointer 0
push this 0
return
function ComputerBoard.getLeftOffset 0
push argument 0
pop pointer 0
push this 2
return
function ComputerBoard.draw 4
push argument 0
pop pointer 0
push this 0
push this 1
call Math.multiply 2
pop local 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 0
push constant 1
add
lt
not
if-goto WHILE_END0
push this 3
push local 0
push this 1
call Math.multiply 2
add
push constant 1
sub
pop local 3
push this 2
push constant 1
sub
push local 3
push this 2
push constant 1
sub
push local 1
add
push local 3
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push this 0
push constant 1
add
lt
not
if-goto WHILE_END1
push this 2
push local 0
push this 1
call Math.multiply 2
add
push constant 1
sub
pop local 2
push local 2
push this 3
push constant 1
sub
push local 2
push this 3
push constant 1
sub
push local 1
add
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push constant 0
return
function ComputerBoard.restoreCellState 3
push argument 0
pop pointer 0
push argument 2
push this 4
add
pop pointer 1
push that 0
pop local 1
push argument 1
push local 1
add
pop pointer 1
push that 0
pop local 0
push local 0
call Cell.getState 1
pop local 2
push local 2
call Cell.shipState 0
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push local 2
call Cell.drawState 2
pop temp 0
label IF_FALSE0
push constant 0
return
function ComputerBoard.generateShips 4
push argument 0
pop pointer 0
call CellVector.new 0
pop local 3
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 0
lt
not
if-goto WHILE_END0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push this 0
lt
not
if-goto WHILE_END1
push local 1
push local 0
push constant 0
call Cell.new 3
pop local 2
push local 3
push local 2
call CellVector.append 2
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
push argument 1
push local 3
call ComputerBoard.putShips 3
pop temp 0
push constant 0
return
function ComputerBoard.putShips 3
push argument 0
pop pointer 0
push constant 6
call Array.new 1
pop local 2
push constant 1
push local 2
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push local 2
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push local 2
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push local 2
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push local 2
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
pop local 0
label WHILE_EXP0
push local 0
push constant 0
gt
not
if-goto WHILE_END0
push local 0
push local 2
add
pop pointer 1
push that 0
pop local 1
label WHILE_EXP1
push local 1
push constant 0
gt
not
if-goto WHILE_END1
push pointer 0
push argument 1
push argument 2
push local 0
call ComputerBoard.putShip 4
pop temp 0
push local 1
push constant 1
sub
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function ComputerBoard.putShip 11
push argument 0
pop pointer 0
call CellVector.new 0
pop local 9
push argument 1
push argument 2
call CellVector.size 1
call Random.randomInt 2
pop local 0
push argument 1
push constant 100
call Random.randomInt 2
push constant 50
call Math.divide 2
push constant 1
add
pop local 6
label WHILE_EXP0
push constant 0
not
not
if-goto WHILE_END0
push argument 2
push local 0
call CellVector.get 2
pop local 7
push local 7
call Cell.getX 1
pop local 2
push local 7
call Cell.getY 1
pop local 3
push local 9
push local 7
call CellVector.append 2
pop temp 0
push argument 3
push constant 1
sub
pop local 1
push local 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
push local 3
call Ship.new 2
pop local 10
push this 5
push local 10
call ShipVector.append 2
pop temp 0
push pointer 0
push local 9
call ComputerBoard.markShip 2
pop temp 0
push pointer 0
push argument 2
push local 9
call ComputerBoard.makeCellsIneligible 3
pop temp 0
push constant 0
return
label IF_FALSE0
push local 6
call Ship.vertical 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 2
push constant 1
add
pop local 4
push argument 2
push local 4
push local 3
call CellVector.find 3
pop local 8
label WHILE_EXP1
push local 8
push constant 0
eq
not
not
if-goto WHILE_END1
push local 9
push local 8
call CellVector.append 2
pop temp 0
push local 1
push constant 1
sub
pop local 1
push local 1
push constant 0
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 2
push local 3
call Ship.new 2
pop local 10
push local 10
push local 9
call CellVector.size 1
call Ship.setLength 2
pop temp 0
push local 10
call Ship.horizontal 0
call Ship.setDirection 2
pop temp 0
push this 5
push local 10
call ShipVector.append 2
pop temp 0
push pointer 0
push local 9
call ComputerBoard.markShip 2
pop temp 0
push pointer 0
push argument 2
push local 9
call ComputerBoard.makeCellsIneligible 3
pop temp 0
push constant 0
return
label IF_FALSE2
push local 4
push constant 1
add
pop local 4
push argument 2
push local 4
push local 3
call CellVector.find 3
pop local 8
goto WHILE_EXP1
label WHILE_END1
push local 2
push constant 1
sub
pop local 4
push argument 2
push local 4
push local 3
call CellVector.find 3
pop local 8
label WHILE_EXP2
push local 8
push constant 0
eq
not
not
if-goto WHILE_END2
push local 9
push local 8
call CellVector.append 2
pop temp 0
push local 1
push constant 1
sub
pop local 1
push local 1
push constant 0
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 4
push local 3
call Ship.new 2
pop local 10
push local 10
push local 9
call CellVector.size 1
call Ship.setLength 2
pop temp 0
push local 10
call Ship.horizontal 0
call Ship.setDirection 2
pop temp 0
push this 5
push local 10
call ShipVector.append 2
pop temp 0
push pointer 0
push local 9
call ComputerBoard.markShip 2
pop temp 0
push pointer 0
push argument 2
push local 9
call ComputerBoard.makeCellsIneligible 3
pop temp 0
push constant 0
return
label IF_FALSE3
push local 4
push constant 1
sub
pop local 4
push argument 2
push local 4
push local 3
call CellVector.find 3
pop local 8
goto WHILE_EXP2
label WHILE_END2
push local 9
call CellVector.clear 1
pop temp 0
push local 9
push local 7
call CellVector.append 2
pop temp 0
push argument 3
push constant 1
sub
pop local 1
push local 3
push constant 1
add
pop local 5
push argument 2
push local 2
push local 5
call CellVector.find 3
pop local 8
label WHILE_EXP3
push local 8
push constant 0
eq
not
not
if-goto WHILE_END3
push local 9
push local 8
call CellVector.append 2
pop temp 0
push local 1
push constant 1
sub
pop local 1
push local 1
push constant 0
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 2
push local 3
call Ship.new 2
pop local 10
push local 10
push local 9
call CellVector.size 1
call Ship.setLength 2
pop temp 0
push local 10
call Ship.vertical 0
call Ship.setDirection 2
pop temp 0
push this 5
push local 10
call ShipVector.append 2
pop temp 0
push pointer 0
push local 9
call ComputerBoard.markShip 2
pop temp 0
push pointer 0
push argument 2
push local 9
call ComputerBoard.makeCellsIneligible 3
pop temp 0
push constant 0
return
label IF_FALSE4
push local 5
push constant 1
add
pop local 5
push argument 2
push local 2
push local 5
call CellVector.find 3
pop local 8
goto WHILE_EXP3
label WHILE_END3
push local 3
push constant 1
sub
pop local 5
push argument 2
push local 2
push local 5
call CellVector.find 3
pop local 8
label WHILE_EXP4
push local 8
push constant 0
eq
not
not
if-goto WHILE_END4
push local 9
push local 8
call CellVector.append 2
pop temp 0
push local 1
push constant 1
sub
pop local 1
push local 1
push constant 0
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 2
push local 5
call Ship.new 2
pop local 10
push local 10
push local 9
call CellVector.size 1
call Ship.setLength 2
pop temp 0
push local 10
call Ship.vertical 0
call Ship.setDirection 2
pop temp 0
push this 5
push local 10
call ShipVector.append 2
pop temp 0
push pointer 0
push local 9
call ComputerBoard.markShip 2
pop temp 0
push pointer 0
push argument 2
push local 9
call ComputerBoard.makeCellsIneligible 3
pop temp 0
push constant 0
return
label IF_FALSE5
push local 5
push constant 1
sub
pop local 5
push argument 2
push local 2
push local 5
call CellVector.find 3
pop local 8
goto WHILE_EXP4
label WHILE_END4
goto IF_END1
label IF_FALSE1
push local 3
push constant 1
add
pop local 5
push argument 2
push local 2
push local 5
call CellVector.find 3
pop local 8
label WHILE_EXP5
push local 8
push constant 0
eq
not
not
if-goto WHILE_END5
push local 9
push local 8
call CellVector.append 2
pop temp 0
push local 1
push constant 1
sub
pop local 1
push local 1
push constant 0
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 2
push local 3
call Ship.new 2
pop local 10
push local 10
push local 9
call CellVector.size 1
call Ship.setLength 2
pop temp 0
push local 10
call Ship.vertical 0
call Ship.setDirection 2
pop temp 0
push this 5
push local 10
call ShipVector.append 2
pop temp 0
push pointer 0
push local 9
call ComputerBoard.markShip 2
pop temp 0
push pointer 0
push argument 2
push local 9
call ComputerBoard.makeCellsIneligible 3
pop temp 0
push constant 0
return
label IF_FALSE6
push local 5
push constant 1
add
pop local 5
push argument 2
push local 2
push local 5
call CellVector.find 3
pop local 8
goto WHILE_EXP5
label WHILE_END5
push local 3
push constant 1
sub
pop local 5
push argument 2
push local 2
push local 5
call CellVector.find 3
pop local 8
label WHILE_EXP6
push local 8
push constant 0
eq
not
not
if-goto WHILE_END6
push local 9
push local 8
call CellVector.append 2
pop temp 0
push local 1
push constant 1
sub
pop local 1
push local 1
push constant 0
eq
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push local 2
push local 5
call Ship.new 2
pop local 10
push local 10
push local 9
call CellVector.size 1
call Ship.setLength 2
pop temp 0
push local 10
call Ship.vertical 0
call Ship.setDirection 2
pop temp 0
push this 5
push local 10
call ShipVector.append 2
pop temp 0
push pointer 0
push local 9
call ComputerBoard.markShip 2
pop temp 0
push pointer 0
push argument 2
push local 9
call ComputerBoard.makeCellsIneligible 3
pop temp 0
push constant 0
return
label IF_FALSE7
push local 5
push constant 1
sub
pop local 5
push argument 2
push local 2
push local 5
call CellVector.find 3
pop local 8
goto WHILE_EXP6
label WHILE_END6
push local 9
call CellVector.clear 1
pop temp 0
push local 9
push local 7
call CellVector.append 2
pop temp 0
push argument 3
push constant 1
sub
pop local 1
push local 2
push constant 1
add
pop local 4
push argument 2
push local 4
push local 3
call CellVector.find 3
pop local 8
label WHILE_EXP7
push local 8
push constant 0
eq
not
not
if-goto WHILE_END7
push local 9
push local 8
call CellVector.append 2
pop temp 0
push local 1
push constant 1
sub
pop local 1
push local 1
push constant 0
eq
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push local 2
push local 3
call Ship.new 2
pop local 10
push local 10
push local 9
call CellVector.size 1
call Ship.setLength 2
pop temp 0
push local 10
call Ship.horizontal 0
call Ship.setDirection 2
pop temp 0
push this 5
push local 10
call ShipVector.append 2
pop temp 0
push pointer 0
push local 9
call ComputerBoard.markShip 2
pop temp 0
push pointer 0
push argument 2
push local 9
call ComputerBoard.makeCellsIneligible 3
pop temp 0
push constant 0
return
label IF_FALSE8
push local 4
push constant 1
add
pop local 4
push argument 2
push local 4
push local 3
call CellVector.find 3
pop local 8
goto WHILE_EXP7
label WHILE_END7
push local 2
push constant 1
sub
pop local 4
push argument 2
push local 4
push local 3
call CellVector.find 3
pop local 8
label WHILE_EXP8
push local 8
push constant 0
eq
not
not
if-goto WHILE_END8
push local 9
push local 8
call CellVector.append 2
pop temp 0
push local 1
push constant 1
sub
pop local 1
push local 1
push constant 0
eq
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push local 4
push local 3
call Ship.new 2
pop local 10
push local 10
push local 9
call CellVector.size 1
call Ship.setLength 2
pop temp 0
push local 10
call Ship.horizontal 0
call Ship.setDirection 2
pop temp 0
push this 5
push local 10
call ShipVector.append 2
pop temp 0
push pointer 0
push local 9
call ComputerBoard.markShip 2
pop temp 0
push pointer 0
push argument 2
push local 9
call ComputerBoard.makeCellsIneligible 3
pop temp 0
push constant 0
return
label IF_FALSE9
push local 4
push constant 1
sub
pop local 4
push argument 2
push local 4
push local 3
call CellVector.find 3
pop local 8
goto WHILE_EXP8
label WHILE_END8
label IF_END1
push local 9
call CellVector.clear 1
pop temp 0
push local 0
push constant 1
add
push argument 2
call CellVector.size 1
call Utils.mod 2
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function ComputerBoard.makeCellsIneligible 7
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push argument 2
call CellVector.size 1
lt
not
if-goto WHILE_END0
push argument 2
push local 0
call CellVector.get 2
pop local 6
push constant 1
neg
pop local 1
label WHILE_EXP1
push local 1
push constant 2
lt
not
if-goto WHILE_END1
push constant 1
neg
pop local 2
label WHILE_EXP2
push local 2
push constant 2
lt
not
if-goto WHILE_END2
push local 6
call Cell.getX 1
push local 2
add
pop local 3
push local 6
call Cell.getY 1
push local 1
add
pop local 4
push argument 1
push local 3
push local 4
call CellVector.indexOf 3
pop local 5
push local 5
push constant 1
neg
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push local 5
call CellVector.remove 2
pop temp 0
label IF_FALSE0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP2
label WHILE_END2
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function ComputerBoard.markShip 4
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push argument 1
call CellVector.size 1
lt
not
if-goto WHILE_END0
push argument 1
push local 0
call CellVector.get 2
pop local 1
push local 1
call Cell.getY 1
push this 4
add
pop pointer 1
push that 0
pop local 3
push local 1
call Cell.getX 1
push local 3
add
pop pointer 1
push that 0
pop local 2
push local 2
call Cell.shipState 0
call Cell.setState 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function ComputerBoard.shoot 2
push argument 0
pop pointer 0
push argument 2
push this 4
add
pop pointer 1
push that 0
pop local 0
push argument 1
push local 0
add
pop pointer 1
push that 0
pop local 1
push local 1
call Cell.getState 1
call Cell.clearState 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
call Cell.missedState 0
call Cell.drawState 2
pop temp 0
label IF_FALSE0
push local 1
call Cell.getState 1
call Cell.shipState 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 1
call Cell.hitState 0
call Cell.drawState 2
pop temp 0
push pointer 0
call ComputerBoard.markSunkShips 1
pop temp 0
push this 6
push constant 7
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
not
return
label IF_FALSE2
label IF_FALSE1
push constant 0
return
function ComputerBoard.markSunkShips 10
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 5
call ShipVector.size 1
lt
not
if-goto WHILE_END0
push this 5
push local 0
call ShipVector.get 2
pop local 6
push local 6
call Ship.getStartX 1
pop local 2
push local 6
call Ship.getStartY 1
pop local 3
push local 6
call Ship.getLength 1
pop local 4
push constant 0
not
pop local 9
push local 6
call Ship.getDirection 1
call Ship.vertical 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push local 4
lt
not
if-goto WHILE_END1
push local 3
push local 1
add
pop local 5
push local 5
push this 4
add
pop pointer 1
push that 0
pop local 7
push local 2
push local 7
add
pop pointer 1
push that 0
pop local 8
push local 8
call Cell.getState 1
call Cell.hitState 0
eq
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
pop local 9
label IF_FALSE1
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 9
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
pop local 1
label WHILE_EXP2
push local 1
push local 4
lt
push local 9
and
not
if-goto WHILE_END2
push local 3
push local 1
add
pop local 5
push local 5
push this 4
add
pop pointer 1
push that 0
pop local 7
push local 2
push local 7
add
pop pointer 1
push that 0
pop local 8
push local 8
call Cell.sunkState 0
call Cell.drawState 2
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP2
label WHILE_END2
push this 6
push constant 1
add
pop this 6
label IF_FALSE2
goto IF_END0
label IF_FALSE0
push constant 0
pop local 1
label WHILE_EXP3
push local 1
push local 4
lt
push local 9
and
not
if-goto WHILE_END3
push local 3
push this 4
add
pop pointer 1
push that 0
pop local 7
push local 2
push local 1
add
pop local 5
push local 5
push local 7
add
pop pointer 1
push that 0
pop local 8
push local 8
call Cell.getState 1
call Cell.hitState 0
eq
not
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
pop local 9
label IF_FALSE3
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP3
label WHILE_END3
push local 9
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 0
pop local 1
label WHILE_EXP4
push local 1
push local 4
lt
not
if-goto WHILE_END4
push local 3
push this 4
add
pop pointer 1
push that 0
pop local 7
push local 2
push local 1
add
push local 7
add
pop pointer 1
push that 0
pop local 8
push local 8
call Cell.sunkState 0
call Cell.drawState 2
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP4
label WHILE_END4
push this 6
push constant 1
add
pop this 6
label IF_FALSE4
label IF_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function ComputerBoard.reset 0
push argument 0
pop pointer 0
push this 4
call Array.dispose 1
pop temp 0
push pointer 0
call ComputerBoard.initCells 1
pop temp 0
push this 5
call ShipVector.dispose 1
pop temp 0
call ShipVector.new 0
pop this 5
push constant 0
return
