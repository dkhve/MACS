class CellVector{
   field int allocLen;
   field int logLen;
   field Array elems;

   constructor CellVector new(){
      let logLen = 0;
	   let allocLen = 4;
	   let elems = Array.new(allocLen);
      return this;
   }

   method void dispose(){
      do elems.dispose();
      do Memory.deAlloc(this);
      return;
   }

   method int size(){
      return logLen;
   }

   method boolean isEmpty(){
      if (logLen = 0){
         return true;
      }
      return false;
   }

   method void clear(){
      do elems.dispose();
      let logLen = 0;
	   let allocLen = 4;
	   let elems = Array.new(allocLen);
      return;
   }

   method void grow(){
      var Array newArray;
      var int i;
      let allocLen = allocLen * 2;
      let newArray = Array.new(allocLen);
      let i = 0;
      while (i < logLen) {
         let newArray[i] = elems[i];
         let i = i + 1;
      }
      do elems.dispose();
      let elems = newArray;
      return;
   }

   method void remove(int index){
      var Cell tempCell;
      while(index < (logLen-1)){
         let tempCell = elems[(index + 1)];
         let elems[index] = tempCell;
         let index = index + 1;
      }
      let logLen = logLen - 1;
      return;
   }

   method void append(Cell cell){
      if (allocLen = logLen) {
		   do grow();
	   }
      let elems[logLen] = cell;
      let logLen = logLen + 1;
      return;
   }

   method Cell get(int index){
      var Cell elem;
      var String errorString;

      if((index  < 0) | (index > (logLen - 1))){
         let errorString = "ERROR INVALID INDEX";
         do Output.println();
         do Output.printString(errorString);
         do Output.println();
         do errorString.dispose();
         return null;
      }

      let elem = elems[index];
      return elem;
   }

   method boolean find(int x, int y){
      var int i;
      var Cell elem;

      let i = 0;

      while(i < logLen){
         let elem = elems[i];
         if((elem.getX() = x) & (elem.getY() = y)){
            return elem;
         }
         let i = i + 1;
      }
      return null;
   }

   method int indexOf(int x, int y){
      var int i;
      var Cell elem;
      let i = 0;
      while(i < logLen){
         let elem = elems[i];
         if((elem.getX() = x) & (elem.getY() = y)){
            return i;
         }
         let i = i + 1;
      }

      return -1;
   }
}
